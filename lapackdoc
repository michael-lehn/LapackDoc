#! /usr/bin/perl -w
use strict;

BEGIN {
    unless ($ENV{LAPACKDOC}) {
        print STDERR "[ERROR] Environment variable LAPACKDOC not set.\n";
        die;
    }

    unshift(@INC, "$ENV{LAPACKDOC}");
}


use File::Basename;
use File::Spec;

use Config;
use Convert;
use Deps;
use Doc;
use DocUtils;
use Filetree;

my $header = DocUtils->LoadLinebuffer(path => $Config::templateDir,
                                      file => "header");
my $footer = DocUtils->LoadLinebuffer(path => $Config::templateDir,
                                      file => "footer");


DocUtils->Install(file => File::Spec->catfile($Config::templateDir,
                                              "default.css"),
                  to   => $Config::htmlDir);

DocUtils->Install(file => File::Spec->catfile($Config::templateDir,
                                              "wz_tooltip.js"),
                  to   => $Config::htmlDir);

my @source = DocUtils->FindFiles(path => $ENV{PWD}, pattern => '.*\.f$');

printf STDERR "[INFO] Using temporary direcory $Config::tmpDir\n";

#
#  Create crash-files and deps-files
#
foreach my $source (@source) {
    my ($filename, $directories, $suffix) = fileparse($source, (".f") );

    my $crash = File::Spec->catfile($Config::tmpDir, "$source.crash");
    my $deps  = File::Spec->catfile($Config::tmpDir, "$source.deps");

    printf STDERR "Processing '$source':\n";

    unless (DocUtils->IsNewerThan(file1 => $source, file2 => $crash)) {
        Deps->Update(depsFile => $deps);
        printf STDERR "  '$crash'\n";
        printf STDERR "  '$deps'\n";
        printf STDERR "  are up-to-date\n";
        next;
    }

    DocUtils->Mkdir(file => $crash);
    DocUtils->Mkdir(file => $deps);

    printf STDERR "  Creating '$crash'\n";
    printf STDERR "   ... and '$deps'\n";
    system("$Config::f77crash $source >$crash 2>$deps");

    Deps->Update(depsFile => $deps);

    printf STDERR "   ... done.\n";
}

printf STDERR "\n";
printf STDERR "-" x 80 . "\n";
printf STDERR "  Converting sourcefiles\n";
printf STDERR "-" x 80 . "\n";

#
#  Convert sourcefiles
#
foreach my $source (@source) {
    my ($srcfilename, $srcdir, $suffix) = fileparse($source, (".f") );

    my $crash     = File::Spec->catfile($Config::tmpDir, "${source}.crash");
    my $deps      = File::Spec->catfile($Config::tmpDir, "${source}.deps");
    my $htmlFile  = File::Spec->catfile($Config::htmlDir, "${source}.html");

    printf STDERR "Processing '$source':\n";

    unless (DocUtils->IsNewerThan(file1 => $crash, file2 => $htmlFile))
    {
        printf STDERR "  is up-to-date\n";
        next;
    }

    printf STDERR "  Creating $htmlFile\n  ";

    my $htmlCode = Convert->Fortran(sourcefile  => $source,
                                    crashfile   => $crash,
                                    cwd         => $srcdir,
                                    lino_prefix => "",
                                    linenumbers => 1);

    my $htmlVars = {
        "TITLE"         => $source,
        "DEFAULT_CSS"   => File::Spec->catfile(
                                         File::Spec->abs2rel("", $srcdir),
                                         $Config::css),
        "WZ_TOOLTIP_JS" => File::Spec->catfile(
                                         File::Spec->abs2rel("", $srcdir),
                                         $Config::tooltip),
        "FILETREE"      => "dir.html#" . File::Spec->catfile($srcdir,
                                                             $srcfilename)
    };

    DocUtils->SaveLinebuffer(file     => $htmlFile,
                             linesRef => $header,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $htmlFile,
                             linesRef => $htmlCode,
                             append   => 1,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $htmlFile,
                             linesRef => $footer,
                             append   => 1,
                             filter   => $htmlVars);

    printf STDERR " done.\n";
}

printf STDERR "\n";
printf STDERR "-" x 80 . "\n";
printf STDERR "  Extracting embedded documentation\n";
printf STDERR "-" x 80 . "\n";

#
#  Extract embedded documentation
#
foreach my $source (@source) {
    my ($srcfilename, $srcdir, $suffix) = fileparse($source, (".f") );

    my $crash    = File::Spec->catfile($Config::tmpDir, "${source}.crash");
    my $srcFile  = File::Spec->catfile($Config::htmlDir, "${source}.html");
    my $docFile  = File::Spec->catfile($Config::htmlDir, $srcdir,
                                       "${srcfilename}.html");
    printf STDERR "Extracting documentation from '$source':\n";

    unless (DocUtils->IsNewerThan(file1 => $source, file2 => $docFile)) {
        printf STDERR "  is up-to-date\n";
        next;
    }


    DocUtils->Mkdir(file => $docFile);

    my $docCode = Doc->Extract(sourceFile => $source,
                               crashFile  => $crash,
                               cwd        => $srcdir);

    unless ($docCode) {
        next;
    }

    printf STDERR "  Creating '$docFile'\n";

    my $sub = lc($srcfilename);
    printf STDERR "  Creating call graph for '$sub' ... (";
    my $callDump = Deps->Dump(call => $sub,
                              cwd  => $srcdir);
    printf STDERR $#{$callDump} . " lines)\n";


    printf STDERR "  Creating caller graph for '$sub' ... (";
    my $callerDump = Deps->Dump(caller => $sub,
                                cwd    => $srcdir);
    printf STDERR $#{$callerDump} . " lines)\n";


    Doc->AddGraphs(htmlRef    => $docCode,
                   path       => $srcdir,
                   callDump   => $callDump,
                   callerDump => $callerDump);

    my $htmlVars = {
        "TITLE"         => $srcfilename,
        "DEFAULT_CSS"   => File::Spec->catfile(
                                         File::Spec->abs2rel("", $srcdir),
                                         $Config::css),
        "WZ_TOOLTIP_JS" => File::Spec->catfile(
                                         File::Spec->abs2rel("", $srcdir),
                                         $Config::tooltip),
        "FILETREE"      => "dir.html#" . File::Spec->catfile($srcdir,
                                                             $srcfilename)
    };

    DocUtils->SaveLinebuffer(file     => $docFile,
                             linesRef => $header,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $docFile,
                             linesRef => $docCode,
                             append   => 1,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $docFile,
                             linesRef => $footer,
                             append   => 1,
                             filter   => $htmlVars);

    printf STDERR "   ... done.\n";
}

printf STDERR "\n";
printf STDERR "-" x 80 . "\n";
printf STDERR "  Creating simple filetrees\n";
printf STDERR "-" x 80 . "\n";

@source = DocUtils->FindFiles(path    => $Config::htmlDir,
                              pattern => '.*\.html$');

my @dir = DocUtils->ExtractDirectories(files => \@source,
                                       allParentDirectories => 1);
push(@dir, ".");

my @sourcefile = Filetree->CompressFileList(\@source);

foreach my $dir (@dir) {
    print STDERR "[INFO] Creating filetree for \"$dir/\"\n";

    my $absDir = File::Spec->catfile($Config::htmlDir, $dir);
    my $filename = File::Spec->catfile($absDir, "dir.html");
    my $filetree = Filetree->new(directory   => $dir,
                                 allFiles    => \@sourcefile);

    my $relTopDir = File::Spec->abs2rel($Config::htmlDir, $absDir);

    my $htmlVars = {
        "TITLE"         => "/". $dir,
        "DEFAULT_CSS"   => File::Spec->catfile($relTopDir, $Config::css),
        "WZ_TOOLTIP_JS" => File::Spec->catfile($relTopDir, $Config::tooltip),
        "FILETREE"      => "",
    };

    DocUtils->SaveLinebuffer(file     => $filename,
                             linesRef => $header,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $filename,
                             linesRef => $filetree->html(),
                             append   => 1,
                             filter   => $htmlVars);
    DocUtils->SaveLinebuffer(file     => $filename,
                             linesRef => $footer,
                             append   => 1,
                             filter   => $htmlVars);


    print STDERR "[INFO]  ... done.\n";
}

